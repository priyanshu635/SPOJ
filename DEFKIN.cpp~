/*

*/

#include<iostream>
#include<stdlib.h>

using namespace std;

void quickSort(int a[],int first,int last)
{
	int pivot,j,temp,i;	
	if(first<last)
	{
		pivot=first;
		i=first;
		j=last;
	
		while(i<j)	
		{
			while(i<last && a[pivot]>=a[i])
				i++;
			while(j>first && a[pivot]<=a[j])
				j--;
			if(i<j)
			{
				temp=a[i];
				a[i]=a[j];
				a[j]=temp;
			}
		}
	
		temp=a[pivot];	
		a[pivot]=a[j];
		a[j]=temp;

		quickSort(a,first,j-1);
		quickSort(a,j+1,last);
	}
}


int main()
{
int test;	
cin>>test;

int x,y,n,i,j;
while(test--)
{
	cin>>x>>y>>n;
	
	int *xcord=(int *)malloc(sizeof(int)*(n+2));
	int *ycord=(int *)malloc(sizeof(int)*(n+2));

	for(i=0;i<n;i++)
		cin>>xcord[i]>>ycord[i];

	xcord[n]=0;
	ycord[n]=0;
	xcord[n+1]=x+1;
	ycord[n+1]=y+1;

	quickSort(xcord,0,n+1);
	quickSort(ycord,0,n+1);

	int max=0,sum,opt=-1;
	for(j=0;j<n+1;j++)		//y-cord
	{
		
		if(ycord[j+1]-ycord[j]-1<=opt)	//for optimization purpose
			continue;

		opt=(ycord[j+1]-ycord[j]-1);

		for(i=0;i<n+1;i++)	//x-cord
		{
			sum=(xcord[i+1]-xcord[i]-1)*(ycord[j+1]-ycord[j]-1);
			if(sum>max)
				max=sum;
		}
	}

	cout<<max<<"\n";
}
return 0;
}
